<#
System.Type enumType = targetType;
System.Type enumUnderlyingType = System.Enum.GetUnderlyingType(enumType);
var fieldInfos = enumType.GetFields(BindingFlags.Public | BindingFlags.Static);
//var values = Enum.GetValues(enumType);


//System.Array enumValues = System.Enum.GetValues(enumType);
#>



/* ---------------------------------------------------------------------------- *
 *		The code is generated by 'T4Wrap' C# proxy generator T4 template		*
 * ---------------------------------------------------------------------------- */

namespace <#=targetProxyNamespace#>
{
	using System;

	<#=writeTypeAttributes(targetType)#><#if (hasTypeAttributes(targetType))#><#{#>

<#}#>
	public enum <#=proxyTypeShortName#> : <#=writeType(enumUnderlyingType)#> 
	{
<#	foreach(var fieldInfo in fieldInfos) {#>
		<#=writeFieldAttributes(fieldInfo)#><#if (hasFieldAttributes(fieldInfo))#><#{#>

		<#}#>
<#=fieldInfo.Name#> = <#=fieldInfo.GetRawConstantValue()#>,
<#	} #>
	}

	public static class <#=proxyTypeShortName#>Extensions 
	{
		public static <#=proxyTypeShortName#> ToWrapper(this <#=writeType(targetType)#> source)
		{
			switch(source)
			{
<#	foreach(var fieldInfo in fieldInfos) {#>
				case <#=writeType(targetType)#>.<#=fieldInfo.Name#>:
					return <#=proxyTypeShortName#>.<#=fieldInfo.Name#>;

<#	} #>
				default:
					throw new ArgumentOutOfRangeException(nameof(source), source, $"No implementation for enum <#=writeType(targetType)#> value {source}");
			}
		}

		public static <#=writeType(targetType)#> FromWrapper(this <#=proxyTypeShortName#> source)
		{
			switch(source)
			{
<#	foreach(var fieldInfo in fieldInfos) {#>
				case <#=proxyTypeShortName#>.<#=fieldInfo.Name#>:
					return <#=writeType(targetType)#>.<#=fieldInfo.Name#>;

<#	} #>
				default:
					throw new ArgumentOutOfRangeException(nameof(source), source, $"No implementation for enum <#=proxyTypeShortName#> value {source}");
			}
		}
	}
}
