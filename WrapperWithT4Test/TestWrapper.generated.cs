// TestLibrary.Enum



/* ---------------------------------------------------------------------------- *
 *		The code is generated by 'T4Wrap' C# proxy generator T4 template		*
 * ---------------------------------------------------------------------------- */

namespace TestLibrary.Proxies
{
	using System;

	[System.Serializable, System.Flags] 
	public enum EnumWrapper : System.Int32 
	{
		[System.Obsolete] 
		Enum1 = 0,
		Enum2 = 1,
		Enum3 = 2,
		EnumX = 99,
	}

	public static class EnumWrapperExtensions 
	{
		public static EnumWrapper ToWrapper(this TestLibrary.Enum source)
		{
			switch(source)
			{
				case TestLibrary.Enum.Enum1:
					return EnumWrapper.Enum1;

				case TestLibrary.Enum.Enum2:
					return EnumWrapper.Enum2;

				case TestLibrary.Enum.Enum3:
					return EnumWrapper.Enum3;

				case TestLibrary.Enum.EnumX:
					return EnumWrapper.EnumX;

				default:
					throw new ArgumentOutOfRangeException(nameof(source), source, $"No implementation for enum TestLibrary.Enum value {source}");
			}
		}

		public static TestLibrary.Enum FromWrapper(this EnumWrapper source)
		{
			switch(source)
			{
				case EnumWrapper.Enum1:
					return TestLibrary.Enum.Enum1;

				case EnumWrapper.Enum2:
					return TestLibrary.Enum.Enum2;

				case EnumWrapper.Enum3:
					return TestLibrary.Enum.Enum3;

				case EnumWrapper.EnumX:
					return TestLibrary.Enum.EnumX;

				default:
					throw new ArgumentOutOfRangeException(nameof(source), source, $"No implementation for enum EnumWrapper value {source}");
			}
		}
	}
}

// TestLibrary.AbstractClass
/* ---------------------------------------------------------------------------- *
 *		The code is generated by 'T4Wrap' C# proxy generator T4 template		*
 * ---------------------------------------------------------------------------- */

namespace TestLibrary.Proxies
{
	public class AbstractClassWrapper : System.Object, IAbstractClassWrapper
	{
		//private TestLibrary.AbstractClass Inner;

		internal TestLibrary.AbstractClass Inner { get; }



	}

	public interface IAbstractClassWrapper
	{

	}

	public interface IAbstractClassWrapperFactory
	{
		IAbstractClassWrapper Create(params object[] args);
	}

	public class AbstractClassWrapperFactory : IAbstractClassWrapperFactory
	{
		public virtual IAbstractClassWrapper Create(params object[] args)
		{
			return (IAbstractClassWrapper)System.Activator.CreateInstance(typeof(AbstractClassWrapper), args);
		}

	}
}
// TestLibrary.Class
/* ---------------------------------------------------------------------------- *
 *		The code is generated by 'T4Wrap' C# proxy generator T4 template		*
 * ---------------------------------------------------------------------------- */

namespace TestLibrary.Proxies
{
	public class ClassWrapper : AbstractClassWrapper, IClassWrapper, Interface1Wrapper
	{
		//private TestLibrary.Class Inner;

		internal TestLibrary.Class Inner { get; }

		#region Constructors
		public ClassWrapper()
		{
			Inner = new TestLibrary.Class();
		}
		#endregion

		#region Properties
		public virtual System.String ReadWrite
		{
			get { return Inner.ReadWrite; }			set { Inner.ReadWrite = value; }
	
		}
		public virtual System.String Read
		{
			get { return Inner.Read; }	
		}
		public virtual System.String this[System.Int32 i, System.Int32 j]
		{				
			get { return Inner[i, j]; }			set{ Inner[i, j] = value; }		}
		public virtual System.String this[System.Int32 i]
		{				
			get { return Inner[i]; }			set{ Inner[i] = value; }		}
		#endregion
		#region Methods
		public virtual void Method1()
		{
			Inner.Method1();
		}
		public virtual void Method2(System.String str)
		{
			Inner.Method2(str);
		}
		public virtual void Method3(System.String str)
		{
			Inner.Method3(str);
		}
		public virtual void Method4(ref System.String str)
		{
			Inner.Method4(ref str);
		}
		public virtual void Method5([System.Runtime.InteropServices.Out, TestLibrary.Attribute] out System.String str)
		{
			Inner.Method5(out str);
		}
		public virtual void Method6(System.String str, [System.Runtime.InteropServices.Optional] System.Boolean isBool)
		{
			Inner.Method6(str, isBool);
		}
		#endregion

		#region Interface1Wrapper Members
			
		System.String Interface1Wrapper.this[System.Int32 i]
		{
			get { return ((TestLibrary.Interface1)Inner)[i]; }
			set { ((TestLibrary.Interface1)Inner)[i] = value; }		}
			
		System.String Interface1Wrapper.this[System.Int32 i, System.Int32 j]
		{
			get { return ((TestLibrary.Interface1)Inner)[i, j]; }
			set { ((TestLibrary.Interface1)Inner)[i, j] = value; }		}
		System.String Interface1Wrapper.ReadWrite
		{
			get { return ((TestLibrary.Interface1)Inner).ReadWrite; }
			set { ((TestLibrary.Interface1)Inner).ReadWrite = value; }
		}
		System.String Interface1Wrapper.Read
		{
			get { return ((TestLibrary.Interface1)Inner).Read; }
		}
		void Interface1Wrapper.Method1()
		{
			((TestLibrary.Interface1)Inner).Method1();
		}
		void Interface1Wrapper.Method2(System.String str)
		{
			((TestLibrary.Interface1)Inner).Method2(str);
		}
		void Interface1Wrapper.Method3(System.String str)
		{
			((TestLibrary.Interface1)Inner).Method3(str);
		}
		void Interface1Wrapper.Method4(ref System.String str)
		{
			((TestLibrary.Interface1)Inner).Method4(ref str);
		}
		void Interface1Wrapper.Method5(out System.String str)
		{
			((TestLibrary.Interface1)Inner).Method5(out str);
		}
		#endregion
	}

	public interface IClassWrapper
	{
		#region Properties
 		System.String ReadWrite { get; set; }
 		System.String Read { get; }
			
		System.String this[System.Int32 i, System.Int32 j]
{ get; set; }
			
		System.String this[System.Int32 i]
{ get; set; }
		#endregion

		#region Methods
		void Method1();			
		void Method2(System.String str);			
		void Method3(System.String str);			
		void Method4(ref System.String str);			
		void Method5(out System.String str);			
		void Method6(System.String str, System.Boolean isBool);			
		#endregion
	}

	public interface IClassWrapperFactory
	{
		IClassWrapper Create(params object[] args);
		IClassWrapper Create();
	}

	public class ClassWrapperFactory : IClassWrapperFactory
	{
		public virtual IClassWrapper Create(params object[] args)
		{
			return (IClassWrapper)System.Activator.CreateInstance(typeof(ClassWrapper), args);
		}

		public virtual IClassWrapper Create()
		{
			return new ClassWrapper(); 
		}
	}
}
// TestLibrary.SealedClass
/* ---------------------------------------------------------------------------- *
 *		The code is generated by 'T4Wrap' C# proxy generator T4 template		*
 * ---------------------------------------------------------------------------- */

namespace TestLibrary.Proxies
{
	public class SealedClassWrapper : ClassWrapper, ISealedClassWrapper, Interface1Wrapper
	{
		//private TestLibrary.SealedClass Inner;

		internal TestLibrary.SealedClass Inner { get; }

		#region Constructors
		public SealedClassWrapper()
		{
			Inner = new TestLibrary.SealedClass();
		}
		#endregion


		#region Interface1Wrapper Members
			
		System.String Interface1Wrapper.this[System.Int32 i]
		{
			get { return ((TestLibrary.Interface1)Inner)[i]; }
			set { ((TestLibrary.Interface1)Inner)[i] = value; }		}
			
		System.String Interface1Wrapper.this[System.Int32 i, System.Int32 j]
		{
			get { return ((TestLibrary.Interface1)Inner)[i, j]; }
			set { ((TestLibrary.Interface1)Inner)[i, j] = value; }		}
		System.String Interface1Wrapper.ReadWrite
		{
			get { return ((TestLibrary.Interface1)Inner).ReadWrite; }
			set { ((TestLibrary.Interface1)Inner).ReadWrite = value; }
		}
		System.String Interface1Wrapper.Read
		{
			get { return ((TestLibrary.Interface1)Inner).Read; }
		}
		void Interface1Wrapper.Method1()
		{
			((TestLibrary.Interface1)Inner).Method1();
		}
		void Interface1Wrapper.Method2(System.String str)
		{
			((TestLibrary.Interface1)Inner).Method2(str);
		}
		void Interface1Wrapper.Method3(System.String str)
		{
			((TestLibrary.Interface1)Inner).Method3(str);
		}
		void Interface1Wrapper.Method4(ref System.String str)
		{
			((TestLibrary.Interface1)Inner).Method4(ref str);
		}
		void Interface1Wrapper.Method5(out System.String str)
		{
			((TestLibrary.Interface1)Inner).Method5(out str);
		}
		#endregion
	}

	public interface ISealedClassWrapper
	{

	}

	public interface ISealedClassWrapperFactory
	{
		ISealedClassWrapper Create(params object[] args);
		ISealedClassWrapper Create();
	}

	public class SealedClassWrapperFactory : ISealedClassWrapperFactory
	{
		public virtual ISealedClassWrapper Create(params object[] args)
		{
			return (ISealedClassWrapper)System.Activator.CreateInstance(typeof(SealedClassWrapper), args);
		}

		public virtual ISealedClassWrapper Create()
		{
			return new SealedClassWrapper(); 
		}
	}
}
// TestLibrary.Interface1
/* ---------------------------------------------------------------------------- *
 *		The code is generated by 'T4Wrap' C# proxy generator T4 template		*
 * ---------------------------------------------------------------------------- */

namespace TestLibrary.Proxies
{
	public interface Interface1Wrapper 
	{
		#region Properties
		System.String this[System.Int32 i] { get; set; }
		System.String this[System.Int32 i, System.Int32 j] { get; set; }
		System.String ReadWrite { get; set; }
		System.String Read { get; }
		#endregion
		#region Methods
		void Method1();
		void Method2(System.String str);
		void Method3([TestLibrary.Attribute] System.String str);
		void Method4([TestLibrary.Attribute] ref System.String str);
		void Method5([System.Runtime.InteropServices.Out, TestLibrary.Attribute] out System.String str);
		#endregion
	}
}

// TestLibrary.AttributeAttribute
/* ---------------------------------------------------------------------------- *
 *		The code is generated by 'T4Wrap' C# proxy generator T4 template		*
 * ---------------------------------------------------------------------------- */

namespace TestLibrary.Proxies
{
	public class AttributeAttributeWrapper : System.Attribute, IAttributeAttributeWrapper, System.Runtime.InteropServices._Attribute
	{
		//private TestLibrary.AttributeAttribute Inner;

		internal TestLibrary.AttributeAttribute Inner { get; }

		#region Constructors
		public AttributeAttributeWrapper()
		{
			Inner = new TestLibrary.AttributeAttribute();
		}
		#endregion


		#region System.Runtime.InteropServices._Attribute Members
		void System.Runtime.InteropServices._Attribute.GetTypeInfoCount(out System.UInt32 pcTInfo)
		{
			((System.Runtime.InteropServices._Attribute)Inner).GetTypeInfoCount(out pcTInfo);
		}
		void System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
		{
			((System.Runtime.InteropServices._Attribute)Inner).GetTypeInfo(iTInfo, lcid, ppTInfo);
		}
		void System.Runtime.InteropServices._Attribute.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
		{
			((System.Runtime.InteropServices._Attribute)Inner).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
		}
		void System.Runtime.InteropServices._Attribute.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
		{
			((System.Runtime.InteropServices._Attribute)Inner).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
		}
		#endregion
	}

	public interface IAttributeAttributeWrapper
	{

	}

	public interface IAttributeAttributeWrapperFactory
	{
		IAttributeAttributeWrapper Create(params object[] args);
		IAttributeAttributeWrapper Create();
	}

	public class AttributeAttributeWrapperFactory : IAttributeAttributeWrapperFactory
	{
		public virtual IAttributeAttributeWrapper Create(params object[] args)
		{
			return (IAttributeAttributeWrapper)System.Activator.CreateInstance(typeof(AttributeAttributeWrapper), args);
		}

		public virtual IAttributeAttributeWrapper Create()
		{
			return new AttributeAttributeWrapper(); 
		}
	}
}
		
