/* ---------------------------------------------------------------------------- *
 *		The code is generated by 'T4Wrap' C# proxy generator T4 template		*
 * ---------------------------------------------------------------------------- */

namespace <#=targetProxyNamespace#>
{
	public class <#=proxyTypeShortName#> : <# if (baseClass != null) { #><#=writeWrapperType(baseClass)#>,<#} #> <#=String.Join(", ", new []{"I" + proxyTypeShortName}.Union(interfaces.Select(i => writeWrapperType(i))))#>
	{
		//private <#=writeType(targetType)#> <#=wrappedInstance#>;

		internal <#=writeType(targetType)#> <#=wrappedInstance#> { get; }

<#if (ctorInfos.Any()) {#>
		#region Constructors
<#	foreach(var ctorInfo in ctorInfos) { #>
<#		var args = ctorInfo.GetParameters();#>
		public <#=writeUnsafe(ctorInfo)#><#=proxyTypeShortName#>(<#=String.Join(", ", args.Select(a => String.Format("{0} {1}", writeWrapperType(a.ParameterType), a.Name)))#>)
		{
			<#=wrappedInstance#> = new <#=writeType(targetType)#>(<#=String.Join(", ", args.Select(a => writeParamName(a)))#>);
<#		foreach(var eventInfo in eventInfos) {
			var eventArgs = String.Join(", ", eventInfo.EventHandlerType.GetMethod("Invoke").GetParameters().Select(a => a.Name));#>
			<#=wrappedInstance#>.<#=eventInfo.Name#> += (<#=eventArgs#>) => { if (this.<#=eventInfo.Name#> != null) this.<#=eventInfo.Name#>(<#=eventArgs#>); };
<#		}#>
		}
<#	}#>
		#endregion
<#}#>

<#if (eventInfos.Any()) {#>
		#region Events
<#	foreach(var eventInfo in eventInfos) {#>
		public virtual event <#=writeType(eventInfo.EventHandlerType)#> <#=eventInfo.Name#>;
<#	}#>
		#endregion
<#}#>
<#if (propertyInfos.Any()) {#>
		#region Properties
<#	foreach(var propInfo in propertyInfos) {#>
<#		var indexers = propInfo.GetIndexParameters();#>
<#		if (indexers.Length > 0) {#>
<#			var indexes = String.Join(", ", indexers.Select(i => i.Name));#>
		public virtual <#=writeUnsafe(propInfo)#><#=writeType(propInfo.PropertyType)#> <#=String.Format("this[{0}]", 
	String.Join(", ", indexers.Select(i => String.Format("{0} {1}", writeType(i.ParameterType), i.Name))))#>
		{				
<#		if (propInfo.CanRead) {#>
			get { return <#=wrappedInstance#>[<#=indexes#>]; }<#}#>
<#			var m = propInfo.GetSetMethod();
			if(m != null && m.IsPublic) {#>
			set{ <#=wrappedInstance#>[<#=indexes#>] = value; }<#}#>
		}
<#		}	
		else {#>
		public virtual <#=writeUnsafe(propInfo)#><#=writeType(propInfo.PropertyType)#> <#=propInfo.Name#>
		{
<#			if (propInfo.CanRead) {#>
			get { return <#=wrappedInstance#>.<#=propInfo.Name#>; }<#}#>
<#				var m = propInfo.GetSetMethod();
				if(m != null && m.IsPublic) {#>
			set { <#=wrappedInstance#>.<#=propInfo.Name#> = value; }
<#			}#>	
		}
<#		}#>
<#	}#>
		#endregion
<#}#>
<#if (methodInfos.Any()) {#>
		#region Methods
<#	foreach(var methodInfo in methodInfos) {#>
<#		var args = methodInfo.GetParameters();#>
		public virtual <#=writeMethodSignature(methodInfo)#>
		{
			<#=writeMethod(methodInfo, wrappedInstance)#>
		}
<#	}#>
		#endregion
<#}#>

<#if (interfaces.Any()) {#>
<#	foreach (var iface in interfaces) {#>
<#		var iName = writeType(iface);
		var iWrapperName = writeWrapperType(iface);#>
		#region <#=iWrapperName#> Members
<#		foreach(var eventInfo in ifaceEvents(iface)) {#>
		event <#=writeType(eventInfo.EventHandlerType)#> <#=iWrapperName#>.<#=eventInfo.Name#>
		{
			add { ((<#=iName#>)<#=wrappedInstance#>).<#=eventInfo.Name#> += value; }
			remove { ((<#=iName#>)<#=wrappedInstance#>).<#=eventInfo.Name#> -= value; }
		}
<#	}#>
<#	foreach(var propInfo in ifaceProperties(iface)) {#>
<#		var indexers = propInfo.GetIndexParameters();#>
<#		if (indexers.Length > 0) {#>			
		<#=writeUnsafe(propInfo)#><#=writeType(propInfo.PropertyType)#> <#=iWrapperName#>.<#=String.Format("this[{0}]", 
			String.Join(", ", indexers.Select(i => String.Format("{0} {1}", writeType(i.ParameterType), i.Name))))#>
		{
<#			var indexes = String.Join(", ", indexers.Select(i => i.Name));#>
<#			if (propInfo.CanRead) {#>
			get { return ((<#=iName#>)<#=wrappedInstance#>)[<#=indexes#>]; }<#}#>
<#				var m = propInfo.GetSetMethod();
				if(m != null && m.IsPublic) {#>

			set { ((<#=iName#>)<#=wrappedInstance#>)[<#=indexes#>] = value; }<#}#>
		}
<#		} else {#>
		<#=writeUnsafe(propInfo)#><#=writeType(propInfo.PropertyType)#> <#=iWrapperName#>.<#=propInfo.Name#>
		{
<#			if (propInfo.CanRead) {#>
			get { return ((<#=iName#>)<#=wrappedInstance#>).<#=propInfo.Name#>; }<#}#>
<#				var m = propInfo.GetSetMethod();
				if(m != null && m.IsPublic){#>

			set { ((<#=iName#>)<#=wrappedInstance#>).<#=propInfo.Name#> = value; }<#}#>

		}
<#			}#>
<#		}#>
<#		foreach(var methodInfo in ifaceMethods(iface)) {#>
<#			var args = methodInfo.GetParameters();#>
		<#=writeUnsafe(methodInfo)#><#=writeType(methodInfo.ReturnParameter.ParameterType)#> <#=iWrapperName#>.<#=methodInfo.Name#>(<#=String.Join(", ",
			args.Select(a => String.Format("{0} {1}", writeParamType(a), a.Name)))#>)
		{
			<#=writeMethod(methodInfo, String.Format("(({0}){1})", iName, wrappedInstance))#>
		}
<#		}#>
		#endregion
<#	}
}#>
	}

	public interface I<#=proxyTypeShortName#>
	{
<#if (eventInfos.Any()) {#>
		#region Events
<#	foreach(var eventInfo in eventInfos) {#>
		event <#=writeType(eventInfo.EventHandlerType)#> <#=eventInfo.Name#>;
<#	}#>
		#endregion
<#}#>
<#if (propertyInfos.Any()) {#>
		#region Properties
<#	foreach(var propInfo in propertyInfos) {#>
<#		var indexers = propInfo.GetIndexParameters();#>
<#		if (indexers.Any()) {#>			
		<#=writeUnsafe(propInfo)#><#=writeType(propInfo.PropertyType)#> <#=String.Format("this[{0}]", String.Join(", ", indexers.Select(i => String.Format("{0} {1}", writeType(i.ParameterType), i.Name))))#>
<#		} else {#> <#=writeUnsafe(propInfo)
#>		<#=writeType(propInfo.PropertyType)#> <#=propInfo.Name#> <#}#>{<#
		if (propInfo.CanRead) {#> get;<#}#><#
			var m = propInfo.GetSetMethod();
		if(m != null && m.IsPublic) {#> set;<#}#> }
<#	}#>
		#endregion
<#}#>

<#if (methodInfos.Any()) {#>
		#region Methods
<#	foreach(var methodInfo in methodInfos) {#>
<#		var args = methodInfo.GetParameters();#>
		<#=writeUnsafe(methodInfo)#><#=writeType(methodInfo.ReturnParameter.ParameterType)#> <#=methodInfo.Name#>(<#=String.Join(", ", 
			args.Select(a => String.Format("{0} {1}", writeParamType(a), a.Name)))#>);			
<#	}#>
		#endregion
<#}#>
	}

	public interface I<#=proxyTypeShortName#>Factory
	{
		I<#=proxyTypeShortName#> Create(params object[] args);
<#	foreach(var ctorInfo in ctorInfos) {#>
<#		var args = ctorInfo.GetParameters();#>
		I<#=proxyTypeShortName#> Create(<#=String.Join(", ",args.Select(a => String.Format("{0} {1}", writeType(a.ParameterType), a.Name)))#>);
<#	}#>
	}

	public class <#=proxyTypeShortName#>Factory : I<#=proxyTypeShortName#>Factory
	{
		public virtual I<#=proxyTypeShortName#> Create(params object[] args)
		{
			return (I<#=proxyTypeShortName#>)System.Activator.CreateInstance(typeof(<#=proxyTypeShortName#>), args);
		}

<#foreach(var ctorInfo in ctorInfos) {#>
<#	var args = ctorInfo.GetParameters();#>
		public virtual I<#=proxyTypeShortName#> Create(<#=String.Join(", ",args.Select(a => String.Format("{0} {1}", writeType(a.ParameterType), a.Name)))#>)
		{
			return new <#=proxyTypeShortName#>(<#=String.Join(", ",args.Select(a => String.Format("{0}", a.Name)))#>); 
		}
<#}#>
	}
}